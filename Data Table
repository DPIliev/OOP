#include <cstdlib>
#include <iostream>

using namespace std;

enum DataType{INT,STRING,DATE};

class Column{
      protected:
                DataType type;
                char* name;
      public:
		     Column()
			 {
                name=new char[1];
                name='\0';
			 }
			 
			 void print()
			 {
                cout<<name<<",";
                cout<<type<<endl;     
             }
			 
			 Column(DataType _type,char* _name)
			 {
                 type=_type;
                 name=new char[strlen(_name)+1];
				 strcpy(name,_name);            
                             
             }
             Column(Column& other)
             {
                 type=other.takeType();
                 name=new char[strlen(other.getName())+1];
                 strcpy(name,other.getName());
                              
             }
             
             Column& operator=(const Column& other)
             {
                 if(this!=&other)
                 {
                    delete name;                 
                  
                 type=other.takeType();
                 name=new char[strlen(other.getName())+1];
				 strcpy(name,other.getName());
                }
                return *this;
             }
             
			
             DataType takeType() const
             {
                    return type;             
             }
             
             
			 char* getName() const
			 {
			      return name;
			 }
            
            
             ~Column()
             {
               delete name;         
             }       
      };
      
      
      class Data
      {
                     
            public:
                   
            virtual void  setData(const char* _data)=0; 
            virtual DataType getType()=0;
            
            virtual void print()
            {}
            
            
                 
      };
      
      class Int:public Data
      {
            private:
                    int number;
            public:
                   Int()
                   {
                        number=0;
                   }
                   
                   Int(int _number)
                   {
                      number=_number;        
                   }
                   
                  
                   
                   int getNumber()const
                   {
                      return number; 
                   }
                   
                   virtual void print()
                   {
                     cout<<"INT,"<<number;
                     cout<<endl;        
                   }
                   
                   Int& operator=(const Int& other)
                   {
                         number=other.getNumber();     
                        
                        
                   }
                   
                   
                   void  setData(const char* _data)
                   {
                   
                         number=atoi(_data);
                   }
                   
                  DataType getType()
                   {
                     return INT;   
                   }
                 
           
      };
      
      class String:public Data
      {
           private:
                    char* character;
                 
           public:
               String()
               {
                 character=new char [0];
                 character[0]='\0';        
               }  
               
               String(char* other)
               {
                  character=new char[strlen(other)+1];
                  strcpy(character,other);      
                             
               }
               
                String& operator=(const String& other)
                {
                   if (this!=&other)
                   {
                      delete  character;
                      character=new char[strlen(other.getChar())+1];
                      strcpy(character,other.getChar());                                        
                   }        
                      return *this;  
                }
                   
                    char* getChar()const
                    {
                       return character;      
                    }  
                    
                    virtual void print()
                    {
                       cout<<"STRING,"<<character;
                       cout<<endl;
                               
                    }
                    
               void setData(const char* _data)
               {
                   character=new char[strlen(_data)+1];
                   strcpy(character,_data);     
               }
               
               DataType getType()
                   {
                     return STRING;   
                   }
               
               
               ~String()
               {
                  delete character;       
               }
      };
      
      class Date:public Data
      {
            private:
                     
                      int date;
            public:
                   Date()
                   
                   {
                      date=19000101;      
                   }
                   
                   virtual Date& operator=(const Date& other)
                   {
                      if (this!=&other)
                      {
                         date=other.getDate();                 
                      }   
                      return *this;
                         
                   }
                   
                   virtual void print()
                   {
                     cout<<"DATE,"<<date;
                     cout<<endl;
                     
                   }
                   
                   void  setData(const char* _data)
                   {
                       date=atoi(_data);      
                   }
              
                   int getDate()const
                   {
                      return date;    
                   }
                   
                    DataType getType()
                   {
                     return DATE;   
                   }                 
                 
      };
      
      class Row
      {
        public:
                  Data** objects;
                  int size;
                  int capacity;
                  
                  bool resize()
                  {
                       
                          Data** newobjects=new Data*[capacity*2];
                          if(newobjects==NULL)
                          return false;
                          for(int i=0;i<size;i++)
                          {
                             newobjects[i]=objects[i];        
                          }
                          Data** tempobjects=objects;
                          objects=newobjects;
                          delete tempobjects;
                          capacity*=2;
                          return true;
                  }
        public:
                Row()
                {
                   capacity=3;
                   size=0;
                   objects=new Data*[capacity];     
                } 
                
                ~Row()
                {
                  for (int i=0;i<size;i++)
                  delete objects[i];
                  delete [] objects;      
                }
                
                void print()
                {
                  for(int i=0;i<size;i++)
                  {
                  objects[i]->print();
                  
                  } 
                }
                
                Row(const Row& other)
                {
                   
                         
                    size=other.size;
                    capacity=other.capacity;
                    
                    objects=new Data*[other.size]; 
                    
                    for (int i=0;i<other.size;i++)
                    objects[i]=other.objects[i];    
                    
                    size=other.size;
                    capacity=other.capacity;             
                }
                
                
                Row& operator=(const Row& other)
                {
                     if(this != &other)
                     {
                         for (int i=0;i<size;i++)
                         delete objects[i];
                         delete [] objects;      
                         objects=new Data*[other.size]; 
                         size=other.size;
                         capacity=other.capacity;
                         
                         for(int i=0;i<other.size;i++)
                         objects[i]=other.objects[i];    
                     }
                     return *this;
                     
                }
                
                
                bool add(Data* newelement)
                {
                  if(size==capacity && !resize())
                  return false;
                  
                  objects[size++]=newelement;
                  
                  return true;       
                }
                
                void del(int index)
                {
                    for(int i=index;i<size;i++) 
                    {
                       objects[i-1]=objects[i];        
                    }
                    size--;
                }
                                
                void changeAt(int index,char* newVal)
                {
                  objects[index]->setData(newVal);
                }
                
            
            
      };
      
      class Relation
      {
	  public:
		  Row* rows;
		  Column* columns;
		  int Csize;
		  int Rsize;
		  int Rcapacity;
		  int Ccapacity;
		  
	  public:
             
          Relation()
          {
          Csize=0;
		  Rsize=0;
		  Rcapacity=3;		  
          rows=new Row[Rcapacity];
          Ccapacity=3;  
          columns=new Column[Ccapacity];   
          }
          
          
		  Relation(Column* _columns,int _size)
		  {
            Csize=0;	
		    Ccapacity=3;  
            columns=new Column[Ccapacity]; 
            Rsize=0;
		    Rcapacity=3;
		    rows=new Row[Rcapacity];
                           
		    for(int i=0;i<_size;i++)
    		{
               if(Csize==Ccapacity)
               Cextend();
               
               columns[Csize++]=_columns[i]; 
                
                
            }
		  
		  }
		  
		  Relation& operator=(const Relation& other)
		  {
              if(this!=&other)
              {
                  
                   delete [] columns;
                   delete [] rows;
                     
              
              Csize=other.getCsize();
              Rsize=other.getRsize() ;     
              Ccapacity=other.Ccapacity;
              Rcapacity=other.Rcapacity;
              columns=new Column[Ccapacity];
              rows=new Row[Rcapacity];
              
              for(int k=0;k<Csize;k++)
              columns[k]=other.columns[k];
              
              for(int f=0;f<Rsize;f++)
              rows[f]=other.rows[f];   
              }
              return *this;
          }
		  
		  bool Cextend()
		  {
             
             cout<<"Cextend"<<endl;
             Column* newColumns=new Column[Ccapacity*2];
             
             if(newColumns==NULL)
             return false;                 
             
             
             for(int i=0;i<Csize;i++)
             {
               newColumns[i]=columns[i];          
             }     
             
             Ccapacity*=2;
             columns=newColumns;
             return true;
          }
          
          
           bool Rextend()
		   {
             cout<<"Rextend";
             Row* newRows=new Row[Rcapacity*2];
             
             if(newRows==NULL)
             return false;                 
             
             
             for(int i=0;i<Rsize;i++)
             {
               newRows[i]=rows[i];          
             } 
             
             Rcapacity*=2;
             
             rows=newRows;
             
             return true;
           }
          
		  void addColumn(Column _column)
   	      {
               if(Csize==Ccapacity)
               Cextend();
               
               columns[Csize++]=_column; 
               
               if(Rsize != 0 )
               {
                       
                    for(int i=0;i<Rsize;i++)
                    {
                            if(_column.takeType()==0)
                            {
                              Data* newInt=new Int;                                                 
                              rows[i].add(newInt);
                            }
                            
                            else if(_column.takeType()==1)
                            {
                              Data* newStr=new String;                                                 
                              rows[i].add(newStr);
                            }
                            
                            else if(_column.takeType()==2)
                            {
                              Data* newDate=new Date;                                                 
                              rows[i].add(newDate);
                            }
                    }   
                     
                } 
                                   
          }
          
          void addRow()
		  {
               
             if(Rsize==Rcapacity)
             Rextend();
       
             for(int i=0;i<Csize;i++)
             {
                     
               if(columns[i].takeType()==0)   
               {
                  Data* newInt=new Int;
                  rows[Rsize].add(newInt);                                  
               }     
               
               else if(columns[i].takeType()==1)   
               {
                  Data* newStr=new String;
                  rows[Rsize].add(newStr);                            
               }     
               
               else if(columns[i].takeType()==2)   
               {
                  Data* newDate=new Date;
                  rows[Rsize].add(newDate);                              
               } 
                   
             }
             
             Rsize++;       
          }
          
          void delColumn(int index)
          {
               
             
               for(int j=index;j<Csize;j++)
               {
                  columns[j-1]=columns[j];          
               }     
               
               for(int i=0;i<Rsize;i++)
                  {
                      rows[i].del(index);
                  }           
             
             Csize--;
          }
          
          void chVal(int Rindex,char* Cname,char* newVal)
          {
               int i=0;
               
               while(strcmp(columns[i].getName(),Cname)!=0)
               {
                     i++;                                      
               }
               
               if(Rindex==0)
               {
                            cout<<"IF";
                            if(i==0)
                            {
                              rows[0].changeAt(i,newVal);       
                            }
                            
                            else
                            rows[0].changeAt(i,newVal);             
               }
               
               else if(i==0)
               {
                  cout<<"ELSE IF";
                  rows[Rindex-1].changeAt(i,newVal);   
               }
                   
               else
               {
                   cout<<"ELSE";
               rows[Rindex-1].changeAt(i,newVal);
               cout<<i<<","<<Rindex;
               }
                            
          }
          
          int getCsize() const
          {
              return Csize;    
              
          }
          
          int getRsize() const
          {
             return Rsize;    
          }
          
          void print()
          {
             for (int i=0;i<Csize;i++)
             {
               cout<<columns[i].getName()<<",";
               cout<<columns[i].takeType()<<endl;   
             }   
             cout<<endl;  
             
          }
       
      };
      
      
int main(int argc, char *argv[])
{
   
    Column a(DATE,"THIRD");
    Column b(INT,"FIRST");
    Column m(INT,"UNIQUE");

  
     
    Column d[25];
    
    for(int i=0;i<6;i++)
    {
     d[i]=a;        
    }
    
    Relation f(d,3);
    Relation k=f;
    Relation j;
    
    Data* newInt=new Int;
    Data* newDate=new Date;
    Data* newString=new String;
    
    cout<<endl;
    
    f.addColumn(m);
    f.addColumn(b);
    f.addColumn(m);
    f.addColumn(m);
    f.addColumn(m);
    f.addColumn(a);
    f.addColumn(a);
    
    f.addColumn(b);
    
    f.addRow();
    f.addRow();
    f.addRow();
    
    f.rows[2].print();
    cout<<endl;
    
    
    //f.chVal(3,"FIRST","111");
    f.print();
    f.chVal(1,"THIRD","897");
   // f.chVal(3,"THIRD","333");
   
    f.rows[0].print();
   
    //f.rows[2].objects[3]->print();
    cout<<endl;
   
    cout<<"END";
    
    system("PAUSE");
    return EXIT_SUCCESS;
}

